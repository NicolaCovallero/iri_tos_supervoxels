#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_tos_supervoxels'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
#gen.add("velocity_scale_factor",  double_t,  0,  "Maximum velocity scale factor",  0.5,      0.0,  1.0)

gen.add("disable_transform",  bool_t,  0,  "disable_transform",  True)
gen.add("voxel_resolution",  double_t,  0,  "voxel_resolution",  0.0075,      0.0,  0.2)
gen.add("seed_resolution",  double_t,  0,  "seed_resolution",  0.03,      0.0,  0.2)
gen.add("color_importance",  double_t,  0,  "color_importance",  0,      0.0,  10.0)
gen.add("spatial_importance",  double_t,  0,  "spatial_importance",  1.0,      0.0,  10.0)
gen.add("normal_importance",  double_t,  0,  "normal_importance",  4.0,      0.0,  10.0)

gen.add("concavity_tolerance_threshold",  double_t,  0,  "concavity_tolerance_threshold",  10,      0.0,  100.0)
gen.add("smoothness_threshold",  double_t,  0,  "smoothness_threshold",  0.1,      0.0,  1.0)
gen.add("min_segment_size",  int_t,  0,  "min_segment_size",  3,      0, 10 )
gen.add("use_extended_convexity",  bool_t,  0,  "use_extended_convexity",  False)
gen.add("use_sanity_criterion",  bool_t,  0,  "use_sanity_criterion",  True)

gen.add("zmin",  double_t,  0,  "zmin",  0.02,      0.0,  0.3)
gen.add("zmax",  double_t,  0,  "zmax",  2.0,      0.0,  10.0)
gen.add("th_points",  int_t,  0,  "th_points",  100,      0,  10000)

exit(gen.generate(PACKAGE, "TosSupervoxelsAlgorithm", "TosSupervoxels"))
